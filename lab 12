  #by jorge r
  install.packages("gapminder")
  install.packages("tidyverse")
  library(gapminder)
  library(tidyverse)
  
  View(gapminder)

  # Permutation Test : âA permutation test (also called a randomization test, re-randomization test, or an exact test) 
                      # is a type of statistical significance test in which the distribution of the test statistic under
                      # the null hypothesis is obtained by calculating all possible values of the test statistic under 
                      # rearrangements of the labels on the observed data points.â
  
              # Do labels matter. Does Categorization matter 
              
              # To perform a permutation test: 
                                          # scramble up the labels, 
                                          # resample the data, and 
                                          # calculate a summary of the data. 
                                          # Repeat this process 1000 or more times. 
                                          # Then, plot the 1000 summaries as a histogram and plot the summary of the actual data on the histogram.
                                          # Decide if the actual data is extreme based on the percentile of the actual summary.
                       
                       # write a function and then runs 1000 or more iterations. 
                       # You also need to plot histograms and calculate percentiles.
  
  # Two-Sample Permutation Test : we want to know if groups A and B have different means for some variable 
                   # H0: Î¼AâÎ¼B=0
                   # H1: Î¼AâÎ¼Bâ 0
  
  
  #is nicaragua life exp diffrent from costa rica ? 
  

  
  Nica_cost_lifexp <-gapminder%>%filter(country %in% c("Nicaragua", "Costa Rica"))
  
  Nica<-Nica_cost_lifexp%>%filter(country=="Nicaragua")
  Costa<-Nica_cost_lifexp%>%filter(country=="Costa Rica")
  mean(Nica$lifeExp)
  mean(Costa$lifeExp)
  mean(Nica$lifeExp)-mean(Costa$lifeExp)
  
  #values of intrest 
    v_all_test <- Nica_cost_lifexp$lifeExp
    length(v_all_test)
  #all_values= v_all_test, n_A=(length(v_all_test)/2))
  perm_mean <- function(perms = 1000, all_values, n_A)
  {
    ## Variables ##
    # perms: The number of permutations 
    # all_values (num): all data values
    # n_A (int): Size of group A
    ###############
    
    # Step 1:
    # Create vector of zeroes of length "perms" to store
    # permuted mean differnces
    perm_mean_diff <- numeric(perms)
    # Loop throught number of permutations
    for (i in c(1:perms))
    {
      
      rand_order <-sample(all_values)
      group_A <-rand_order[1:n_A]
      group_B <-rand_order[(n_A+1):length(all_values)]
      
      # Step 3:
      # Compute the sample means for the two groups from 
      # step 2
      A_bar <- mean(group_A)
      B_bar <- mean(group_B)
      
      # Step 4: 
      # Compute the difference in sample means, store the
      # value in the vector from step 1
      diff_means <- A_bar - B_bar
      
      
      perm_mean_diff[i] = diff_means
    }
      # Step 5:
      # Return the permuted mean differences vector
      
      
      return(perm_mean_diff)
 
    }
  
  

  x<-perm_mean(perms=1000, all_values=v_all_test, n_A=(length(v_all_test)/2))
  hist(x)
  quantile(x, probs = seq(0, 1, 0.05))
  
  (aH<-mean(Nica$lifeExp)-mean(Costa$lifeExp))

  # based on a two sample t test it seems that diffrances in life expectacy in nicaragua and costarica are significantly diffrent 
  # life exp : costa > nica 
  
  
  
  #is there a corralation between life exp and pop 
  
  perm_cor <- function(perms = 1000, x, y)
  {
    ## Variables ##
    # perms: The number of permutations 
    # x: Vector of Variable 1 - for computing correlation
    # y: Vector of Variable 2 - for computing correlation
    ###############
    
    # Step 1:
    # Create vector of zeroes of length "perms" to store
    # permuted mean differnces
    perm_mean_diffC <- numeric(perms)
    # Loop throught number of permutations
    for (i in c(1:perms))
    {
      # Step 2:
      # Randomly mix up the values in the vector "y"
      rand_order_y <-sample(y)
      # Step 3:
      # Compute the correlation between x and the randomly mixed
      # up y-vector. Store this value in the vector from step 1.
      
      vc<-cor(x, rand_order_y) 
      
      perm_mean_diffC[i]= vc
      
    }
    
    # Step 4:
    # Return new updated vector, created in step 1
    return(perm_mean_diffC)
  }
  
  xc<-gapminder$pop
  yc<-gapminder$lifeExp
  
  xyc<-perm_cor(perms = 1000, xc, yc)
 hist(xyc)  
 
 #i still need to calculate the acutual cor and seee where it falls in the histogram 
 #by jorge r 
